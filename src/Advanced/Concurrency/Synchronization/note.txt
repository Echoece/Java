Java Provides us with the way to control when a thread can change a value in the heap.
The process of controlling when threads execute code and therefore when they can access the heap is called synchronization.

# important :: The heap is where application memory is allocated. instance variables are stored there, but for threads they have their own thread stack inside heap
               where only the thread have access. So the local variables are a property of thread and other thread cant access those copy, but the instance variable
               is stored in heap, and all threads have access to it. That is when the problems occur when we try to use thread and thus comes the need of synchronization.
               Because when one thread changes value of an object in  heap memory, all other  thread see the new value and work with the new value.


# if two thread working on same object, and it have synchronized methods :
-> we can synchronize methods/statements. when they are synchronized, only one thread can execute that method at a time. While one thread access
   the method, all other thread that want to call this method will suspend till the thread running the method exits.
-> If a class have for example, 3 synchronized methods, only one of them can ever run at a time and only on one thread.
-> we cant synchronize the constructor, it will be syntax error.


# for using synchronization on a statement block,

=> important note, each thread have its own copy of local variable of the object in its own thread stack, so if we synchronize any local
   variable , the monitor lock will be on the local variable. So the synchronization wont work at all.

   => another important note, only exception is using a string variable. Because DataTypes.String objects are reused within the jvm, so we can
      use synchronization on that and it will work fine. But rule of thumb is , we dont use synchronized on local variable.
   => When using a local object variable , the object reference is stored in the thread stack. But the object values are stored on the heap.

